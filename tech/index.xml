<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Teches on </title>
    <link>http://tofs.me/tech/</link>
    <description>Recent content in Teches on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 19 Jul 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://tofs.me/tech/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to merge a git repository as a subdirectory and preserve history</title>
      <link>http://tofs.me/tech/how-to-merge-git-repositories/</link>
      <pubDate>Sun, 19 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tofs.me/tech/how-to-merge-git-repositories/</guid>
      <description>

&lt;h2 id=&#34;clean-and-fast-why-to-merge-and-preserve-history:51f655526f9cbc4e41a39e61908e4aab&#34;&gt;Clean and fast why to merge and preserve history&lt;/h2&gt;

&lt;p&gt;Purpose merge project-y as a subfolder in project-x&lt;/p&gt;

&lt;p&gt;cd project-y folder
mkdir project-y (yes, we are deliberatingly creating a subfolder as the same name of the project)
mv * project-y (except git repository and configuration itself)
git add project-y
git commit -m &amp;ldquo;preparing to merge: creating subfolder&amp;rdquo;&lt;/p&gt;

&lt;p&gt;cd project-x folder
git remote -f add project-y path-to/project-y
git merge project-y/master&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to run a specific test case in Go?</title>
      <link>http://tofs.me/tech/how-to-run-a-specific-test-case-in-go-golang/</link>
      <pubDate>Mon, 08 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tofs.me/tech/how-to-run-a-specific-test-case-in-go-golang/</guid>
      <description>

&lt;h2 id=&#34;go-test-run-matching-testcase-s-regex:c735798007179cc9f751c5e64d89f751&#34;&gt;go test -run &amp;ldquo;Matching TestCase(s) Regex&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;You can alternatively provide the list of files right after the keyword &amp;ldquo;test&amp;rdquo;, but there are some boring tradeoffs and mixups to worry.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What are the differences between Service, Factory and Provider in Angular JS?</title>
      <link>http://tofs.me/tech/angular-factory-vs-service-vs-provider/</link>
      <pubDate>Mon, 08 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tofs.me/tech/angular-factory-vs-service-vs-provider/</guid>
      <description>

&lt;h2 id=&#34;factory:87649f85a912b186731bf188b3af2166&#34;&gt;Factory&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You provide a function;&lt;/li&gt;
&lt;li&gt;When used Angular will run the function and &lt;strong&gt;return your function returned value&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;You usually implement the factory to create an object and return it so every factory injection will give you a different object;&lt;/li&gt;
&lt;li&gt;The name reflects exactly what happens: It&amp;rsquo;s a factory of new instances;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;service:87649f85a912b186731bf188b3af2166&#34;&gt;Service&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You provide a function;&lt;/li&gt;
&lt;li&gt;When used Angular will &lt;strong&gt;return new yourFunction()&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Angular will cache only one instance of your object;&lt;/li&gt;
&lt;li&gt;The name reflects exactly what will happen: It&amp;rsquo;s a &amp;ldquo;global&amp;rdquo; service that will be shared by any controller;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;provider:87649f85a912b186731bf188b3af2166&#34;&gt;Provider&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You provide a function;&lt;/li&gt;
&lt;li&gt;Same as service, but you could &lt;strong&gt;access it in module config()&lt;/strong&gt;;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Why not declare global functions and variables in javascript?</title>
      <link>http://tofs.me/tech/why-not-declare-global-functions-in-javascript/</link>
      <pubDate>Mon, 08 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tofs.me/tech/why-not-declare-global-functions-in-javascript/</guid>
      <description>

&lt;h2 id=&#34;you-declare-a-function-called-myfunction:e2fa5b114e947baf909e8cf468b7b092&#34;&gt;You declare a function called MyFunction;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function MyFunction(){
    return &amp;quot;I&#39;m happy!&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;you-have-co-workers-writing-another-piece-of-the-software-or-you-need-a-third-part-script:e2fa5b114e947baf909e8cf468b7b092&#34;&gt;You have co-workers writing another piece of the software, or you need a third-part script;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function MyFunction() {
    return &amp;quot;I&#39;m sad&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;somebody-had-the-same-name-idea-as-you-now-you-have-two-functions-with-the-same-name-and-javascript-will-not-even-complain-about-it-just-keep-the-later:e2fa5b114e947baf909e8cf468b7b092&#34;&gt;Somebody had the same name idea as you, now you have two functions with the same name and Javascript will not even complain about it, just keep the later;&lt;/h2&gt;

&lt;p&gt;What is gonna be, sad or happy? I bet sad&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What is docker and why is so popular?</title>
      <link>http://tofs.me/tech/what-is-docker-and-why-is-popular/</link>
      <pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://tofs.me/tech/what-is-docker-and-why-is-popular/</guid>
      <description>

&lt;h2 id=&#34;docker-allows-two-processes-run-on-the-same-computer-with-their-own-virtual-operating-system:7c560270f5b996703bc9987fa86ab58f&#34;&gt;Docker allows two processes run on the same computer with their own virtual operating system&lt;/h2&gt;

&lt;p&gt;Docker provides tool chain and libs isolation for processes running in the same underlining OS. Notice that every process will also have its own RAM, disk and kernel.&lt;/p&gt;

&lt;h2 id=&#34;consequence-docker-is-cheaper-than-virtualization-and-applicable-in-most-cases:7c560270f5b996703bc9987fa86ab58f&#34;&gt;Consequence: Docker is cheaper than virtualization and applicable in most cases&lt;/h2&gt;

&lt;p&gt;Virtualization replicates the guest OS and so waste resources. However, virtualization allows running different operating systems on the same hardware.&lt;/p&gt;

&lt;h2 id=&#34;docker-is-open-source:7c560270f5b996703bc9987fa86ab58f&#34;&gt;Docker is open source&lt;/h2&gt;

&lt;p&gt;No upfront cost.&lt;/p&gt;

&lt;h2 id=&#34;cloud-is-everywhere:7c560270f5b996703bc9987fa86ab58f&#34;&gt;Cloud is everywhere&lt;/h2&gt;

&lt;p&gt;It will reduce the cost of software &amp;ldquo;cloudification&amp;rdquo;, which is a major tendency.&lt;/p&gt;

&lt;h2 id=&#34;docker-vs-virtualization:7c560270f5b996703bc9987fa86ab58f&#34;&gt;Docker vs Virtualization&lt;/h2&gt;

&lt;p&gt;&lt;style&gt; 

div.inline {
	display: inline;
	padding: 1em;
}
div.inline-block {
	display: inline-block;
	text-align:center;
	padding: 0.5em;
}
.inline-block div {
	border-radius: 5px;
	width: 10em;
	padding: 0.3em;
	display:block;
}
.inline-block div:nth-child(odd) {
	color: #E8E8E8;
    background: #0081c0;
}

.inline-block div:nth-child(even) {
    background: #000000;
	color: #C0C0C0 
} 
.block{
	display:block;
	width: 100%;
	text-align:center;
	border-radius: 1em;
}
.block div {
	padding: 0.2em;
}
.red {
	background: #CC3333; 
	color:#E8E8E8;
}
.gold {
	background: #FF9900;
	color:#505050;
}
.darkred {
	background: #660000;
	color:#E8E8E8;
}
.border {
	border-radius: 5px;
	width: 25em;
	border: 1px solid darkgray;
	text-align:center;
	display: inline-block;
	margin-left: 2em;
}
.border h3 {
	color: #404040;
}

&lt;/style&gt;
	
&lt;div class=&#34;border&#34;&gt;
	&lt;h3&gt;Virtual Machine approach&lt;/h3&gt;
	&lt;div class=&#34;inline&#34;&gt;
		&lt;div class=&#34;inline-block&#34;&gt;
			&lt;div&gt;Application A&lt;/div&gt;
			&lt;div&gt;Guest OS&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class=&#34;inline-block&#34;&gt;
			&lt;div&gt;Application B&lt;/div&gt;
			&lt;div&gt;Guest OS&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&#34;block&#34;&gt;
		&lt;div class=&#34;darkred&#34;&gt;Hypervisor&lt;/div&gt;	
		&lt;div class=&#34;red&#34;&gt;Host OS&lt;/div&gt;
		&lt;div class=&#34;gold&#34;&gt;Hardware&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;border&#34;&gt;
	&lt;h3&gt;Docker approach&lt;/h3&gt;
	&lt;div class=&#34;inline&#34;&gt;
		&lt;div class=&#34;inline-block&#34;&gt;
			&lt;div&gt;Application A&lt;/div&gt;
		&lt;/div&gt;
		&lt;div class=&#34;inline-block&#34;&gt;
			&lt;div&gt;Application B&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&#34;block&#34;&gt;
		&lt;div class=&#34;darkred&#34;&gt;Docker&lt;/div&gt;	
		&lt;div class=&#34;red&#34;&gt;Host OS&lt;/div&gt;
		&lt;div class=&#34;gold&#34;&gt;Hardware&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>